# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:28:04+00:00

from __future__ import annotations

from datetime import date as date_aliased
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class APIStatusAppVersion(BaseModel):
    latest_app_version: int = Field(
        ..., description='Internal use - Latest application version available.'
    )
    min_app_version: int = Field(
        ...,
        description='Internal use - Minimum application version required to correctly connect and process data.',
    )


class AwardRecipient(BaseModel):
    awardee: Optional[str] = Field(
        None, description='The name of the individual given the award. May be null.'
    )
    team_key: Optional[str] = Field(
        None,
        description='The TBA team key for the team that was given the award. May be null.',
    )


class DistrictList(BaseModel):
    abbreviation: str = Field(..., description='The short identifier for the district.')
    display_name: str = Field(..., description='The long name for the district.')
    key: str = Field(..., description='Key for this district, e.g. `2016ne`.')
    year: int = Field(..., description='Year this district participated.')


class EventPoint(BaseModel):
    alliance_points: int = Field(
        ..., description='Points awarded for alliance selection.'
    )
    award_points: int = Field(..., description='Points awarded for event awards.')
    district_cmp: bool = Field(
        ..., description='`true` if this event is a District Championship event.'
    )
    elim_points: int = Field(
        ..., description='Points awarded for elimination match performance.'
    )
    event_key: str = Field(..., description='TBA Event key for this event.')
    qual_points: int = Field(
        ..., description='Points awarded for qualification match performance.'
    )
    total: int = Field(..., description='Total points awarded at this event.')


class DistrictRanking(BaseModel):
    event_points: Optional[List[EventPoint]] = Field(
        None,
        description='List of events that contributed to the point total for the team.',
    )
    point_total: int = Field(..., description='Total district points for the team.')
    rank: int = Field(..., description='Numerical rank of the team, 1 being top rank.')
    rookie_bonus: Optional[int] = Field(
        None, description='Any points added to a team as a result of the rookie bonus.'
    )
    team_key: str = Field(..., description='TBA team key for the team.')


class Backup(BaseModel):
    in_: Optional[str] = Field(
        None, alias='in', description='Team key that was called in as the backup.'
    )
    out: Optional[str] = Field(
        None, description='Team key that was replaced by the backup team.'
    )


class Points(BaseModel):
    alliance_points: int = Field(
        ..., description='Points awarded for alliance selection'
    )
    award_points: int = Field(..., description='Points awarded for event awards.')
    elim_points: int = Field(
        ..., description='Points awarded for elimination match performance.'
    )
    qual_points: int = Field(
        ..., description='Points awarded for qualification match performance.'
    )
    total: int = Field(..., description='Total points awarded at this event.')


class Tiebreakers(BaseModel):
    highest_qual_scores: Optional[List[int]] = None
    qual_wins: Optional[int] = None


class EventDistrictPoints(BaseModel):
    points: Dict[str, Points] = Field(
        ...,
        description='Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.',
    )
    tiebreakers: Optional[Dict[str, Tiebreakers]] = Field(
        None,
        description='Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.',
    )


class EventInsights(BaseModel):
    playoff: Optional[Dict[str, Any]] = Field(
        None, description='Insights for the playoff round of an event'
    )
    qual: Optional[Dict[str, Any]] = Field(
        None, description='Inights for the qualification round of an event'
    )


class EventInsights2016(BaseModel):
    A_ChevalDeFrise: List[float] = Field(
        ...,
        description='For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    A_Portcullis: List[float] = Field(
        ...,
        description='For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    B_Moat: List[float] = Field(
        ...,
        description='For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    B_Ramparts: List[float] = Field(
        ...,
        description='For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    C_Drawbridge: List[float] = Field(
        ...,
        description='For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    C_SallyPort: List[float] = Field(
        ...,
        description='For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    D_RockWall: List[float] = Field(
        ...,
        description='For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    D_RoughTerrain: List[float] = Field(
        ...,
        description='For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    LowBar: List[float] = Field(
        ...,
        description='For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
    )
    average_auto_score: float = Field(..., description='Average autonomous score.')
    average_boulder_score: float = Field(..., description='Average boulder score.')
    average_crossing_score: float = Field(..., description='Average crossing score.')
    average_foul_score: float = Field(..., description='Average foul score.')
    average_high_goals: float = Field(
        ..., description='Average number of high goals scored.'
    )
    average_low_goals: float = Field(
        ..., description='Average number of low goals scored.'
    )
    average_score: float = Field(..., description='Average total score.')
    average_tower_score: float = Field(..., description='Average tower score.')
    average_win_margin: float = Field(..., description='Average margin of victory.')
    average_win_score: float = Field(..., description='Average winning score.')
    breaches: List[float] = Field(
        ...,
        description='An array with three values, number of times breached, number of opportunities to breach, and percentage.',
    )
    captures: List[float] = Field(
        ...,
        description='An array with three values, number of times captured, number of opportunities to capture, and percentage.',
    )
    challenges: List[float] = Field(
        ...,
        description='An array with three values, number of times challenged, number of opportunities to challenge, and percentage.',
    )
    high_score: List[str] = Field(
        ...,
        description='An array with three values, high score, match key from the match with the high score, and the name of the match.',
    )
    scales: List[float] = Field(
        ...,
        description='An array with three values, number of times scaled, number of opportunities to scale, and percentage.',
    )


class EventInsights2017(BaseModel):
    average_foul_score: float = Field(..., description='Average foul score.')
    average_fuel_points: float = Field(..., description='Average fuel points scored.')
    average_fuel_points_auto: float = Field(
        ..., description='Average fuel points scored during auto.'
    )
    average_fuel_points_teleop: float = Field(
        ..., description='Average fuel points scored during teleop.'
    )
    average_high_goals: float = Field(
        ..., description='Average points scored in the high goal.'
    )
    average_high_goals_auto: float = Field(
        ..., description='Average points scored in the high goal during auto.'
    )
    average_high_goals_teleop: float = Field(
        ..., description='Average points scored in the high goal during teleop.'
    )
    average_low_goals: float = Field(
        ..., description='Average points scored in the low goal.'
    )
    average_low_goals_auto: float = Field(
        ..., description='Average points scored in the low goal during auto.'
    )
    average_low_goals_teleop: float = Field(
        ..., description='Average points scored in the low goal during teleop.'
    )
    average_mobility_points_auto: float = Field(
        ..., description='Average mobility points scored during auto.'
    )
    average_points_auto: float = Field(
        ..., description='Average points scored during auto.'
    )
    average_points_teleop: float = Field(
        ..., description='Average points scored during teleop.'
    )
    average_rotor_points: float = Field(..., description='Average rotor points scored.')
    average_rotor_points_auto: float = Field(
        ..., description='Average rotor points scored during auto.'
    )
    average_rotor_points_teleop: float = Field(
        ..., description='Average rotor points scored during teleop.'
    )
    average_score: float = Field(..., description='Average score.')
    average_takeoff_points_teleop: float = Field(
        ..., description='Average takeoff points scored during teleop.'
    )
    average_win_margin: float = Field(..., description='Average margin of victory.')
    average_win_score: float = Field(..., description='Average winning score.')
    high_kpa: List[str] = Field(
        ...,
        description='An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match',
    )
    high_score: List[str] = Field(
        ...,
        description='An array with three values, high score, match key from the match with the high score, and the name of the match',
    )
    kpa_achieved: List[float] = Field(
        ...,
        description='An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.',
    )
    mobility_counts: List[float] = Field(
        ...,
        description='An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.',
    )
    rotor_1_engaged: List[float] = Field(
        ...,
        description='An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.',
    )
    rotor_1_engaged_auto: List[float] = Field(
        ...,
        description='An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.',
    )
    rotor_2_engaged: List[float] = Field(
        ...,
        description='An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.',
    )
    rotor_2_engaged_auto: List[float] = Field(
        ...,
        description='An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.',
    )
    rotor_3_engaged: List[float] = Field(
        ...,
        description='An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.',
    )
    rotor_4_engaged: List[float] = Field(
        ...,
        description='An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.',
    )
    takeoff_counts: List[float] = Field(
        ...,
        description='An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.',
    )
    unicorn_matches: List[float] = Field(
        ...,
        description='An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.',
    )


class EventInsights2018(BaseModel):
    auto_quest_achieved: List[float] = Field(
        ...,
        description='An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.',
    )
    average_boost_played: float = Field(
        ..., description='Average number of boost power up scored (out of 3).'
    )
    average_endgame_points: float = Field(..., description='Average endgame points.')
    average_force_played: float = Field(
        ..., description='Average number of force power up scored (out of 3).'
    )
    average_foul_score: float = Field(..., description='Average foul score.')
    average_points_auto: float = Field(
        ..., description='Average points scored during auto.'
    )
    average_points_teleop: float = Field(
        ..., description='Average points scored during teleop.'
    )
    average_run_points_auto: float = Field(
        ..., description='Average mobility points scored during auto.'
    )
    average_scale_ownership_points: float = Field(
        ..., description='Average scale ownership points scored.'
    )
    average_scale_ownership_points_auto: float = Field(
        ..., description='Average scale ownership points scored during auto.'
    )
    average_scale_ownership_points_teleop: float = Field(
        ..., description='Average scale ownership points scored during teleop.'
    )
    average_score: float = Field(..., description='Average score.')
    average_switch_ownership_points: float = Field(
        ..., description='Average switch ownership points scored.'
    )
    average_switch_ownership_points_auto: float = Field(
        ..., description='Average switch ownership points scored during auto.'
    )
    average_switch_ownership_points_teleop: float = Field(
        ..., description='Average switch ownership points scored during teleop.'
    )
    average_vault_points: float = Field(..., description='Average value points scored.')
    average_win_margin: float = Field(..., description='Average margin of victory.')
    average_win_score: float = Field(..., description='Average winning score.')
    boost_played_counts: List[float] = Field(
        ...,
        description='An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.',
    )
    climb_counts: List[float] = Field(
        ...,
        description='An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.',
    )
    face_the_boss_achieved: List[float] = Field(
        ...,
        description='An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.',
    )
    force_played_counts: List[float] = Field(
        ...,
        description='An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.',
    )
    high_score: List[str] = Field(
        ...,
        description='An array with three values, high score, match key from the match with the high score, and the name of the match',
    )
    levitate_played_counts: List[float] = Field(
        ...,
        description='An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.',
    )
    run_counts_auto: List[float] = Field(
        ...,
        description='An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.',
    )
    scale_neutral_percentage: float = Field(
        ..., description='Average scale neutral percentage.'
    )
    scale_neutral_percentage_auto: float = Field(
        ..., description='Average scale neutral percentage during auto.'
    )
    scale_neutral_percentage_teleop: float = Field(
        ..., description='Average scale neutral percentage during teleop.'
    )
    switch_owned_counts_auto: List[float] = Field(
        ...,
        description='An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.',
    )
    unicorn_matches: List[float] = Field(
        ...,
        description='An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.',
    )
    winning_opp_switch_denial_percentage_teleop: float = Field(
        ...,
        description='Average opposing switch denail percentage for the winning alliance during teleop.',
    )
    winning_own_switch_ownership_percentage: float = Field(
        ...,
        description='Average own switch ownership percentage for the winning alliance.',
    )
    winning_own_switch_ownership_percentage_auto: float = Field(
        ...,
        description='Average own switch ownership percentage for the winning alliance during auto.',
    )
    winning_own_switch_ownership_percentage_teleop: float = Field(
        ...,
        description='Average own switch ownership percentage for the winning alliance during teleop.',
    )
    winning_scale_ownership_percentage: float = Field(
        ..., description='Average scale ownership percentage for the winning alliance.'
    )
    winning_scale_ownership_percentage_auto: float = Field(
        ...,
        description='Average scale ownership percentage for the winning alliance during auto.',
    )
    winning_scale_ownership_percentage_teleop: float = Field(
        ...,
        description='Average scale ownership percentage for the winning alliance during teleop.',
    )


class EventOPRs(BaseModel):
    ccwms: Optional[Dict[str, float]] = Field(
        None,
        description='A key-value pair with team key (eg `frc254`) as key and CCWM as value.',
    )
    dprs: Optional[Dict[str, float]] = Field(
        None,
        description='A key-value pair with team key (eg `frc254`) as key and DPR as value.',
    )
    oprs: Optional[Dict[str, float]] = Field(
        None,
        description='A key-value pair with team key (eg `frc254`) as key and OPR as value.',
    )


class EventPredictions(BaseModel):
    pass


class ExtraStatsInfoItem(BaseModel):
    name: str = Field(
        ..., description='Name of the field used in the `extra_stats` array.'
    )
    precision: float = Field(
        ...,
        description='Integer expressing the number of digits of precision in the number provided in `sort_orders`.',
    )


class SortOrderInfoItem(BaseModel):
    name: str = Field(
        ..., description='Name of the field used in the `sort_order` array.'
    )
    precision: int = Field(
        ...,
        description='Integer expressing the number of digits of precision in the number provided in `sort_orders`.',
    )


class EventSimple(BaseModel):
    city: Optional[str] = Field(
        None, description='City, town, village, etc. the event is located in.'
    )
    country: Optional[str] = Field(None, description='Country the event is located in.')
    district: Optional[DistrictList] = None
    end_date: date_aliased = Field(
        ..., description='Event end date in `yyyy-mm-dd` format.'
    )
    event_code: str = Field(..., description='Event short code, as provided by FIRST.')
    event_type: int = Field(
        ...,
        description='Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2',
    )
    key: str = Field(
        ...,
        description='TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.',
    )
    name: str = Field(
        ...,
        description='Official name of event on record either provided by FIRST or organizers of offseason event.',
    )
    start_date: date_aliased = Field(
        ..., description='Event start date in `yyyy-mm-dd` format.'
    )
    state_prov: Optional[str] = Field(
        None, description='State or Province the event is located in.'
    )
    year: int = Field(..., description='Year the event data is for.')


class CompLevel(Enum):
    qm = 'qm'
    ef = 'ef'
    qf = 'qf'
    sf = 'sf'
    f = 'f'


class Video(BaseModel):
    key: Optional[str] = Field(None, description='Unique key representing this video')
    type: Optional[str] = Field(None, description="Can be one of 'youtube' or 'tba'")


class WinningAlliance(Enum):
    red = 'red'
    blue = 'blue'
    field_ = ''


class Coopertition(Enum):
    None_ = 'None'
    Unknown = 'Unknown'
    Stack = 'Stack'


class MatchScoreBreakdown2015Alliance(BaseModel):
    adjust_points: Optional[int] = None
    auto_points: Optional[int] = None
    container_count_level1: Optional[int] = None
    container_count_level2: Optional[int] = None
    container_count_level3: Optional[int] = None
    container_count_level4: Optional[int] = None
    container_count_level5: Optional[int] = None
    container_count_level6: Optional[int] = None
    container_points: Optional[int] = None
    container_set: Optional[bool] = None
    foul_count: Optional[int] = None
    foul_points: Optional[int] = None
    litter_count_container: Optional[int] = None
    litter_count_landfill: Optional[int] = None
    litter_count_unprocessed: Optional[int] = None
    litter_points: Optional[int] = None
    robot_set: Optional[bool] = None
    teleop_points: Optional[int] = None
    total_points: Optional[int] = None
    tote_count_far: Optional[int] = None
    tote_count_near: Optional[int] = None
    tote_points: Optional[int] = None
    tote_set: Optional[bool] = None
    tote_stack: Optional[bool] = None


class Robot1Auto(Enum):
    Crossed = 'Crossed'
    Reached = 'Reached'
    None_ = 'None'


class Robot2Auto(Enum):
    Crossed = 'Crossed'
    Reached = 'Reached'
    None_ = 'None'


class Robot3Auto(Enum):
    Crossed = 'Crossed'
    Reached = 'Reached'
    None_ = 'None'


class MatchScoreBreakdown2016Alliance(BaseModel):
    adjustPoints: Optional[int] = None
    autoBoulderPoints: Optional[int] = None
    autoBouldersHigh: Optional[int] = None
    autoBouldersLow: Optional[int] = None
    autoCrossingPoints: Optional[int] = None
    autoPoints: Optional[int] = None
    autoReachPoints: Optional[int] = None
    breachPoints: Optional[int] = None
    capturePoints: Optional[int] = None
    foulCount: Optional[int] = None
    foulPoints: Optional[int] = None
    position1crossings: Optional[int] = None
    position2: Optional[str] = None
    position2crossings: Optional[int] = None
    position3: Optional[str] = None
    position3crossings: Optional[int] = None
    position4: Optional[str] = None
    position4crossings: Optional[int] = None
    position5: Optional[str] = None
    position5crossings: Optional[int] = None
    robot1Auto: Optional[Robot1Auto] = None
    robot2Auto: Optional[Robot2Auto] = None
    robot3Auto: Optional[Robot3Auto] = None
    techFoulCount: Optional[int] = None
    teleopBoulderPoints: Optional[int] = None
    teleopBouldersHigh: Optional[int] = None
    teleopBouldersLow: Optional[int] = None
    teleopChallengePoints: Optional[int] = None
    teleopCrossingPoints: Optional[int] = None
    teleopDefensesBreached: Optional[bool] = None
    teleopPoints: Optional[int] = None
    teleopScalePoints: Optional[int] = None
    teleopTowerCaptured: Optional[int] = None
    totalPoints: Optional[int] = None
    towerEndStrength: Optional[int] = None
    towerFaceA: Optional[str] = None
    towerFaceB: Optional[str] = None
    towerFaceC: Optional[str] = None


class Robot1Auto1(Enum):
    Unknown = 'Unknown'
    Mobility = 'Mobility'
    None_ = 'None'


class Robot2Auto1(Enum):
    Unknown = 'Unknown'
    Mobility = 'Mobility'
    None_ = 'None'


class Robot3Auto1(Enum):
    Unknown = 'Unknown'
    Mobility = 'Mobility'
    None_ = 'None'


class MatchScoreBreakdown2017Alliance(BaseModel):
    adjustPoints: Optional[int] = None
    autoFuelHigh: Optional[int] = None
    autoFuelLow: Optional[int] = None
    autoFuelPoints: Optional[int] = None
    autoMobilityPoints: Optional[int] = None
    autoPoints: Optional[int] = None
    autoRotorPoints: Optional[int] = None
    foulCount: Optional[int] = None
    foulPoints: Optional[int] = None
    kPaBonusPoints: Optional[int] = None
    kPaRankingPointAchieved: Optional[bool] = None
    robot1Auto: Optional[Robot1Auto1] = None
    robot2Auto: Optional[Robot2Auto1] = None
    robot3Auto: Optional[Robot3Auto1] = None
    rotor1Auto: Optional[bool] = None
    rotor1Engaged: Optional[bool] = None
    rotor2Auto: Optional[bool] = None
    rotor2Engaged: Optional[bool] = None
    rotor3Engaged: Optional[bool] = None
    rotor4Engaged: Optional[bool] = None
    rotorBonusPoints: Optional[int] = None
    rotorRankingPointAchieved: Optional[bool] = None
    techFoulCount: Optional[int] = None
    teleopFuelHigh: Optional[int] = None
    teleopFuelLow: Optional[int] = None
    teleopFuelPoints: Optional[int] = None
    teleopPoints: Optional[int] = None
    teleopRotorPoints: Optional[int] = None
    teleopTakeoffPoints: Optional[int] = None
    totalPoints: Optional[int] = None
    touchpadFar: Optional[str] = None
    touchpadMiddle: Optional[str] = None
    touchpadNear: Optional[str] = None


class MatchScoreBreakdown2018Alliance(BaseModel):
    adjustPoints: Optional[int] = None
    autoOwnershipPoints: Optional[int] = None
    autoPoints: Optional[int] = None
    autoQuestRankingPoint: Optional[bool] = None
    autoRobot1: Optional[str] = None
    autoRobot2: Optional[str] = None
    autoRobot3: Optional[str] = None
    autoRunPoints: Optional[int] = None
    autoScaleOwnershipSec: Optional[int] = None
    autoSwitchAtZero: Optional[bool] = None
    autoSwitchOwnershipSec: Optional[int] = None
    endgamePoints: Optional[int] = None
    endgameRobot1: Optional[str] = None
    endgameRobot2: Optional[str] = None
    endgameRobot3: Optional[str] = None
    faceTheBossRankingPoint: Optional[bool] = None
    foulCount: Optional[int] = None
    foulPoints: Optional[int] = None
    rp: Optional[int] = None
    tba_gameData: Optional[str] = Field(
        None,
        description="Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance's perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details).",
    )
    techFoulCount: Optional[int] = None
    teleopOwnershipPoints: Optional[int] = None
    teleopPoints: Optional[int] = None
    teleopScaleBoostSec: Optional[int] = None
    teleopScaleForceSec: Optional[int] = None
    teleopScaleOwnershipSec: Optional[int] = None
    teleopSwitchBoostSec: Optional[int] = None
    teleopSwitchForceSec: Optional[int] = None
    teleopSwitchOwnershipSec: Optional[int] = None
    totalPoints: Optional[int] = None
    vaultBoostPlayed: Optional[int] = None
    vaultBoostTotal: Optional[int] = None
    vaultForcePlayed: Optional[int] = None
    vaultForceTotal: Optional[int] = None
    vaultLevitatePlayed: Optional[int] = None
    vaultLevitateTotal: Optional[int] = None
    vaultPoints: Optional[int] = None


class MatchScoreBreakdown2019Alliance(BaseModel):
    adjustPoints: Optional[int] = None
    autoPoints: Optional[int] = None
    bay1: Optional[str] = None
    bay2: Optional[str] = None
    bay3: Optional[str] = None
    bay4: Optional[str] = None
    bay5: Optional[str] = None
    bay6: Optional[str] = None
    bay7: Optional[str] = None
    bay8: Optional[str] = None
    cargoPoints: Optional[int] = None
    completeRocketRankingPoint: Optional[bool] = None
    completedRocketFar: Optional[bool] = None
    completedRocketNear: Optional[bool] = None
    endgameRobot1: Optional[str] = None
    endgameRobot2: Optional[str] = None
    endgameRobot3: Optional[str] = None
    foulCount: Optional[int] = None
    foulPoints: Optional[int] = None
    habClimbPoints: Optional[int] = None
    habDockingRankingPoint: Optional[bool] = None
    habLineRobot1: Optional[str] = None
    habLineRobot2: Optional[str] = None
    habLineRobot3: Optional[str] = None
    hatchPanelPoints: Optional[int] = None
    lowLeftRocketFar: Optional[str] = None
    lowLeftRocketNear: Optional[str] = None
    lowRightRocketFar: Optional[str] = None
    lowRightRocketNear: Optional[str] = None
    midLeftRocketFar: Optional[str] = None
    midLeftRocketNear: Optional[str] = None
    midRightRocketFar: Optional[str] = None
    midRightRocketNear: Optional[str] = None
    preMatchBay1: Optional[str] = None
    preMatchBay2: Optional[str] = None
    preMatchBay3: Optional[str] = None
    preMatchBay6: Optional[str] = None
    preMatchBay7: Optional[str] = None
    preMatchBay8: Optional[str] = None
    preMatchLevelRobot1: Optional[str] = None
    preMatchLevelRobot2: Optional[str] = None
    preMatchLevelRobot3: Optional[str] = None
    rp: Optional[int] = None
    sandStormBonusPoints: Optional[int] = None
    techFoulCount: Optional[int] = None
    teleopPoints: Optional[int] = None
    topLeftRocketFar: Optional[str] = None
    topLeftRocketNear: Optional[str] = None
    topRightRocketFar: Optional[str] = None
    topRightRocketNear: Optional[str] = None
    totalPoints: Optional[int] = None


class MatchScoreBreakdown2020Alliance(BaseModel):
    adjustPoints: Optional[int] = None
    autoCellPoints: Optional[int] = None
    autoCellsBottom: Optional[int] = None
    autoCellsInner: Optional[int] = None
    autoCellsOuter: Optional[int] = None
    autoInitLinePoints: Optional[int] = None
    autoPoints: Optional[int] = None
    controlPanelPoints: Optional[int] = None
    endgamePoints: Optional[int] = None
    endgameRobot1: Optional[str] = None
    endgameRobot2: Optional[str] = None
    endgameRobot3: Optional[str] = None
    endgameRungIsLevel: Optional[str] = None
    foulCount: Optional[int] = None
    foulPoints: Optional[int] = None
    initLineRobot1: Optional[str] = None
    initLineRobot2: Optional[str] = None
    initLineRobot3: Optional[str] = None
    rp: Optional[int] = None
    shieldEnergizedRankingPoint: Optional[bool] = None
    shieldOperationalRankingPoint: Optional[bool] = None
    stage1Activated: Optional[bool] = None
    stage2Activated: Optional[bool] = None
    stage3Activated: Optional[bool] = None
    stage3TargetColor: Optional[str] = None
    tba_numRobotsHanging: Optional[int] = Field(
        None,
        description='Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.',
    )
    tba_shieldEnergizedRankingPointFromFoul: Optional[bool] = Field(
        None,
        description='Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.',
    )
    techFoulCount: Optional[int] = None
    teleopCellPoints: Optional[int] = None
    teleopCellsBottom: Optional[int] = None
    teleopCellsInner: Optional[int] = None
    teleopCellsOuter: Optional[int] = None
    teleopPoints: Optional[int] = None
    totalPoints: Optional[int] = None


class EndgameRobot1(Enum):
    Traversal = 'Traversal'
    High = 'High'
    Mid = 'Mid'
    Low = 'Low'
    None_ = 'None'


class EndgameRobot2(Enum):
    Traversal = 'Traversal'
    High = 'High'
    Mid = 'Mid'
    Low = 'Low'
    None_ = 'None'


class EndgameRobot3(Enum):
    Traversal = 'Traversal'
    High = 'High'
    Mid = 'Mid'
    Low = 'Low'
    None_ = 'None'


class TaxiRobot1(Enum):
    Yes = 'Yes'
    No = 'No'


class TaxiRobot2(Enum):
    Yes = 'Yes'
    No = 'No'


class TaxiRobot3(Enum):
    Yes = 'Yes'
    No = 'No'


class MatchScoreBreakdown2022Alliance(BaseModel):
    adjustPoints: Optional[int] = None
    autoCargoLowerBlue: Optional[int] = None
    autoCargoLowerFar: Optional[int] = None
    autoCargoLowerNear: Optional[int] = None
    autoCargoLowerRed: Optional[int] = None
    autoCargoPoints: Optional[int] = None
    autoCargoTotal: Optional[int] = None
    autoCargoUpperBlue: Optional[int] = None
    autoCargoUpperFar: Optional[int] = None
    autoCargoUpperNear: Optional[int] = None
    autoCargoUpperRed: Optional[int] = None
    autoPoints: Optional[int] = None
    autoTaxiPoints: Optional[int] = None
    cargoBonusRankingPoint: Optional[bool] = None
    endgamePoints: Optional[int] = None
    endgameRobot1: Optional[EndgameRobot1] = None
    endgameRobot2: Optional[EndgameRobot2] = None
    endgameRobot3: Optional[EndgameRobot3] = None
    foulCount: Optional[int] = None
    foulPoints: Optional[int] = None
    hangarBonusRankingPoint: Optional[bool] = None
    matchCargoTotal: Optional[int] = None
    quintetAchieved: Optional[bool] = None
    rp: Optional[int] = None
    taxiRobot1: Optional[TaxiRobot1] = None
    taxiRobot2: Optional[TaxiRobot2] = None
    taxiRobot3: Optional[TaxiRobot3] = None
    techFoulCount: Optional[int] = None
    teleopCargoLowerBlue: Optional[int] = None
    teleopCargoLowerFar: Optional[int] = None
    teleopCargoLowerNear: Optional[int] = None
    teleopCargoLowerRed: Optional[int] = None
    teleopCargoPoints: Optional[int] = None
    teleopCargoTotal: Optional[int] = None
    teleopCargoUpperBlue: Optional[int] = None
    teleopCargoUpperFar: Optional[int] = None
    teleopCargoUpperNear: Optional[int] = None
    teleopCargoUpperRed: Optional[int] = None
    teleopPoints: Optional[int] = None
    totalPoints: Optional[int] = None


class MatchTimeseries2018(BaseModel):
    blue_auto_quest: Optional[int] = Field(
        None,
        description='1 if the blue alliance is credited with the AUTO QUEST, 0 if not.',
    )
    blue_boost_count: Optional[int] = Field(
        None,
        description='Number of POWER CUBES in the BOOST section of the blue alliance VAULT.',
    )
    blue_boost_played: Optional[int] = Field(
        None,
        description='Returns 1 if the blue alliance BOOST was played, or 0 if not played.',
    )
    blue_current_powerup: Optional[str] = Field(
        None,
        description='Name of the current blue alliance POWER UP being played, or `null`.',
    )
    blue_face_the_boss: Optional[int] = Field(
        None,
        description='1 if the blue alliance is credited with FACING THE BOSS, 0 if not.',
    )
    blue_force_count: Optional[int] = Field(
        None,
        description='Number of POWER CUBES in the FORCE section of the blue alliance VAULT.',
    )
    blue_force_played: Optional[int] = Field(
        None,
        description='Returns 1 if the blue alliance FORCE was played, or 0 if not played.',
    )
    blue_levitate_count: Optional[int] = Field(
        None,
        description='Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.',
    )
    blue_levitate_played: Optional[int] = Field(
        None,
        description='Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.',
    )
    blue_powerup_time_remaining: Optional[str] = Field(
        None,
        description='Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.',
    )
    blue_scale_owned: Optional[int] = Field(
        None, description='1 if the blue alliance owns the SCALE, 0 if not.'
    )
    blue_score: Optional[int] = Field(
        None, description='Current score for the blue alliance.'
    )
    blue_switch_owned: Optional[int] = Field(
        None, description='1 if the blue alliance owns their SWITCH, 0 if not.'
    )
    event_key: Optional[str] = Field(
        None,
        description='TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.',
    )
    match_id: Optional[str] = Field(
        None,
        description='Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.',
    )
    mode: Optional[str] = Field(
        None,
        description='Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.',
    )
    play: Optional[int] = None
    red_auto_quest: Optional[int] = Field(
        None,
        description='1 if the red alliance is credited with the AUTO QUEST, 0 if not.',
    )
    red_boost_count: Optional[int] = Field(
        None,
        description='Number of POWER CUBES in the BOOST section of the red alliance VAULT.',
    )
    red_boost_played: Optional[int] = Field(
        None,
        description='Returns 1 if the red alliance BOOST was played, or 0 if not played.',
    )
    red_current_powerup: Optional[str] = Field(
        None,
        description='Name of the current red alliance POWER UP being played, or `null`.',
    )
    red_face_the_boss: Optional[int] = Field(
        None,
        description='1 if the red alliance is credited with FACING THE BOSS, 0 if not.',
    )
    red_force_count: Optional[int] = Field(
        None,
        description='Number of POWER CUBES in the FORCE section of the red alliance VAULT.',
    )
    red_force_played: Optional[int] = Field(
        None,
        description='Returns 1 if the red alliance FORCE was played, or 0 if not played.',
    )
    red_levitate_count: Optional[int] = Field(
        None,
        description='Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.',
    )
    red_levitate_played: Optional[int] = Field(
        None,
        description='Returns 1 if the red alliance LEVITATE was played, or 0 if not played.',
    )
    red_powerup_time_remaining: Optional[str] = Field(
        None,
        description='Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.',
    )
    red_scale_owned: Optional[int] = Field(
        None, description='1 if the red alliance owns the SCALE, 0 if not.'
    )
    red_score: Optional[int] = Field(
        None, description='Current score for the red alliance.'
    )
    red_switch_owned: Optional[int] = Field(
        None, description='1 if the red alliance owns their SWITCH, 0 if not.'
    )
    time_remaining: Optional[int] = Field(
        None,
        description='Amount of time remaining in the match, only valid during `auto` and `teleop` modes.',
    )


class MatchAlliance(BaseModel):
    dq_team_keys: Optional[List[str]] = Field(
        None, description='TBA team keys (eg `frc254`) of any disqualified teams.'
    )
    score: int = Field(
        ...,
        description='Score for this alliance. Will be null or -1 for an unplayed match.',
    )
    surrogate_team_keys: Optional[List[str]] = Field(
        None,
        description='TBA team keys (eg `frc254`) of any teams playing as a surrogate.',
    )
    team_keys: List[str]


class Type(Enum):
    youtube = 'youtube'
    cdphotothread = 'cdphotothread'
    imgur = 'imgur'
    facebook_profile = 'facebook-profile'
    youtube_channel = 'youtube-channel'
    twitter_profile = 'twitter-profile'
    github_profile = 'github-profile'
    instagram_profile = 'instagram-profile'
    periscope_profile = 'periscope-profile'
    grabcad = 'grabcad'
    instagram_image = 'instagram-image'
    external_link = 'external-link'
    avatar = 'avatar'


class Media(BaseModel):
    details: Optional[Dict[str, Any]] = Field(
        None, description='If required, a JSON dict of additional media information.'
    )
    direct_url: Optional[str] = Field(None, description='Direct URL to the media.')
    foreign_key: str = Field(
        ..., description='The key used to identify this media on the media site.'
    )
    preferred: Optional[bool] = Field(
        None, description='True if the media is of high quality.'
    )
    type: Type = Field(..., description='String type of the media element.')
    view_url: Optional[str] = Field(
        None,
        description='The URL that leads to the full web page for the media, if one exists.',
    )


class Team(BaseModel):
    address: Optional[str] = Field(
        None, description='Will be NULL, for future development.'
    )
    city: Optional[str] = Field(
        None,
        description='City of team derived from parsing the address registered with FIRST.',
    )
    country: Optional[str] = Field(
        None,
        description='Country of team derived from parsing the address registered with FIRST.',
    )
    gmaps_place_id: Optional[str] = Field(
        None, description='Will be NULL, for future development.'
    )
    gmaps_url: Optional[str] = Field(
        None, description='Will be NULL, for future development.'
    )
    home_championship: Optional[Dict[str, Any]] = Field(
        None,
        description="Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.",
    )
    key: str = Field(
        ...,
        description='TBA team key with the format `frcXXXX` with `XXXX` representing the team number.',
    )
    lat: Optional[float] = Field(
        None, description='Will be NULL, for future development.'
    )
    lng: Optional[float] = Field(
        None, description='Will be NULL, for future development.'
    )
    location_name: Optional[str] = Field(
        None, description='Will be NULL, for future development.'
    )
    motto: Optional[str] = Field(
        None,
        description="Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.",
    )
    name: str = Field(..., description='Official long name registered with FIRST.')
    nickname: Optional[str] = Field(
        None, description='Team nickname provided by FIRST.'
    )
    postal_code: Optional[str] = Field(
        None, description='Postal code from the team address.'
    )
    rookie_year: Optional[int] = Field(
        None, description='First year the team officially competed.'
    )
    school_name: Optional[str] = Field(
        None,
        description='Name of team school or affilited group registered with FIRST.',
    )
    state_prov: Optional[str] = Field(
        None,
        description='State of team derived from parsing the address registered with FIRST.',
    )
    team_number: int = Field(..., description='Official team number issued by FIRST.')
    website: Optional[str] = Field(
        None, description='Official website associated with the team.'
    )


class TeamEventStatusAllianceBackup(BaseModel):
    in_: Optional[str] = Field(
        None, alias='in', description='TBA key for the backup team called in.'
    )
    out: Optional[str] = Field(
        None, description='TBA key for the team replaced by the backup.'
    )


class Level(Enum):
    qm = 'qm'
    ef = 'ef'
    qf = 'qf'
    sf = 'sf'
    f = 'f'


class Status1(Enum):
    won = 'won'
    eliminated = 'eliminated'
    playing = 'playing'


class SortOrderInfoItem1(BaseModel):
    name: Optional[str] = Field(
        None, description='The descriptive name of the value used to sort the ranking.'
    )
    precision: Optional[int] = Field(
        None,
        description='The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`.',
    )


class TeamRobot(BaseModel):
    key: str = Field(..., description='Internal TBA identifier for this robot.')
    robot_name: str = Field(
        ..., description='Name of the robot as provided by the team.'
    )
    team_key: str = Field(..., description='TBA team key for this robot.')
    year: int = Field(..., description='Year this robot competed in.')


class TeamSimple(BaseModel):
    city: Optional[str] = Field(
        None,
        description='City of team derived from parsing the address registered with FIRST.',
    )
    country: Optional[str] = Field(
        None,
        description='Country of team derived from parsing the address registered with FIRST.',
    )
    key: str = Field(
        ...,
        description='TBA team key with the format `frcXXXX` with `XXXX` representing the team number.',
    )
    name: str = Field(..., description='Official long name registered with FIRST.')
    nickname: Optional[str] = Field(
        None, description='Team nickname provided by FIRST.'
    )
    state_prov: Optional[str] = Field(
        None,
        description='State of team derived from parsing the address registered with FIRST.',
    )
    team_number: int = Field(..., description='Official team number issued by FIRST.')


class WLTRecord(BaseModel):
    losses: int = Field(..., description='Number of losses.')
    ties: int = Field(..., description='Number of ties.')
    wins: int = Field(..., description='Number of wins.')


class Type1(Enum):
    youtube = 'youtube'
    twitch = 'twitch'
    ustream = 'ustream'
    iframe = 'iframe'
    html5 = 'html5'
    rtmp = 'rtmp'
    livestream = 'livestream'
    direct_link = 'direct_link'
    mms = 'mms'
    justin = 'justin'
    stemtv = 'stemtv'
    dacast = 'dacast'


class Webcast(BaseModel):
    channel: str = Field(
        ...,
        description='Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.',
    )
    date: Optional[str] = Field(
        None,
        description='The date for the webcast in `yyyy-mm-dd` format. May be null.',
    )
    file: Optional[str] = Field(
        None,
        description='File identification as may be required for some types. May be null.',
    )
    type: Type1 = Field(
        ...,
        description='Type of webcast, typically descriptive of the streaming provider.',
    )


class ZebraTeam(BaseModel):
    team_key: str = Field(
        ...,
        description='The TBA team key for the Zebra MotionWorks data.',
        examples=['frc7332'],
    )
    xs: List[float] = Field(
        ...,
        description='A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.',
    )
    ys: List[float] = Field(
        ...,
        description='A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.',
    )


class DistrictDistrictKeyEventsKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Event Keys')


class DistrictDistrictKeyEventsSimpleGetResponse(RootModel[List[EventSimple]]):
    root: List[EventSimple]


class DistrictDistrictKeyRankingsGetResponse(RootModel[List[DistrictRanking]]):
    root: List[DistrictRanking]


class DistrictDistrictKeyTeamsGetResponse(RootModel[List[Team]]):
    root: List[Team]


class DistrictDistrictKeyTeamsKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Team Keys')


class DistrictDistrictKeyTeamsSimpleGetResponse(RootModel[List[TeamSimple]]):
    root: List[TeamSimple]


class DistrictsYearGetResponse(RootModel[List[DistrictList]]):
    root: List[DistrictList]


class EventEventKeyMatchesKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Match Keys')


class EventEventKeyMatchesTimeseriesGetResponse(RootModel[List[str]]):
    root: List[str]


class EventEventKeyTeamsGetResponse(RootModel[List[Team]]):
    root: List[Team]


class EventEventKeyTeamsKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Team Keys')


class EventEventKeyTeamsSimpleGetResponse(RootModel[List[TeamSimple]]):
    root: List[TeamSimple]


class EventsYearKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Event Keys')


class EventsYearSimpleGetResponse(RootModel[List[EventSimple]]):
    root: List[EventSimple]


class MatchMatchKeyTimeseriesGetResponse(RootModel[List[Dict[str, Any]]]):
    root: List[Dict[str, Any]]


class TeamTeamKeyDistrictsGetResponse(RootModel[List[DistrictList]]):
    root: List[DistrictList]


class TeamTeamKeyEventEventKeyMatchesKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Match Keys')


class TeamTeamKeyEventsKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Event Keys')


class TeamTeamKeyEventsSimpleGetResponse(RootModel[List[EventSimple]]):
    root: List[EventSimple]


class TeamTeamKeyEventsYearKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Event Keys')


class TeamTeamKeyEventsYearSimpleGetResponse(RootModel[List[EventSimple]]):
    root: List[EventSimple]


class TeamTeamKeyMatchesYearKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Match Keys')


class TeamTeamKeyMediaTagMediaTagGetResponse(RootModel[List[Media]]):
    root: List[Media]


class TeamTeamKeyMediaTagMediaTagYearGetResponse(RootModel[List[Media]]):
    root: List[Media]


class TeamTeamKeyMediaYearGetResponse(RootModel[List[Media]]):
    root: List[Media]


class TeamTeamKeyRobotsGetResponse(RootModel[List[TeamRobot]]):
    root: List[TeamRobot]


class TeamTeamKeySocialMediaGetResponse(RootModel[List[Media]]):
    root: List[Media]


class TeamTeamKeyYearsParticipatedGetResponse(RootModel[List[int]]):
    root: List[int]


class TeamsPageNumGetResponse(RootModel[List[Team]]):
    root: List[Team]


class TeamsPageNumKeysGetResponse(RootModel[List[str]]):
    root: List[str]


class TeamsPageNumSimpleGetResponse(RootModel[List[TeamSimple]]):
    root: List[TeamSimple]


class TeamsYearPageNumGetResponse(RootModel[List[Team]]):
    root: List[Team]


class TeamsYearPageNumKeysGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of Team Keys')


class TeamsYearPageNumSimpleGetResponse(RootModel[List[TeamSimple]]):
    root: List[TeamSimple]


class APIStatus(BaseModel):
    android: APIStatusAppVersion
    current_season: int = Field(..., description='Year of the current FRC season.')
    down_events: List[str] = Field(
        ...,
        description='An array of strings containing event keys of any active events that are no longer updating.',
    )
    ios: APIStatusAppVersion
    is_datafeed_down: bool = Field(
        ..., description='True if the entire FMS API provided by FIRST is down.'
    )
    max_season: int = Field(
        ..., description='Maximum FRC season year for valid queries.'
    )


class Award(BaseModel):
    award_type: int = Field(
        ...,
        description='Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6',
    )
    event_key: str = Field(
        ..., description='The event_key of the event the award was won at.'
    )
    name: str = Field(
        ...,
        description='The name of the award as provided by FIRST. May vary for the same award type.',
    )
    recipient_list: List[AwardRecipient] = Field(
        ...,
        description="A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).",
    )
    year: int = Field(..., description='The year this award was won.')


class Status(BaseModel):
    current_level_record: Optional[WLTRecord] = None
    level: Optional[str] = None
    playoff_average: Optional[float] = None
    record: Optional[WLTRecord] = None
    status: Optional[str] = None


class EliminationAlliance(BaseModel):
    backup: Optional[Backup] = Field(
        None, description='Backup team called in, may be null.'
    )
    declines: Optional[List[str]] = Field(
        None, description='List of teams that declined the alliance.'
    )
    name: Optional[str] = Field(None, description='Alliance name, may be null.')
    picks: List[str] = Field(
        ...,
        description='List of team keys picked for the alliance. First pick is captain.',
    )
    status: Optional[Status] = None


class Event(BaseModel):
    address: Optional[str] = Field(
        None, description="Address of the event's venue, if available."
    )
    city: Optional[str] = Field(
        None, description='City, town, village, etc. the event is located in.'
    )
    country: Optional[str] = Field(None, description='Country the event is located in.')
    district: Optional[DistrictList] = None
    division_keys: Optional[List[str]] = Field(
        None, description='An array of event keys for the divisions at this event.'
    )
    end_date: date_aliased = Field(
        ..., description='Event end date in `yyyy-mm-dd` format.'
    )
    event_code: str = Field(..., description='Event short code, as provided by FIRST.')
    event_type: int = Field(
        ...,
        description='Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2',
    )
    event_type_string: str = Field(
        ..., description='Event Type, eg Regional, District, or Offseason.'
    )
    first_event_code: Optional[str] = Field(
        None,
        description='Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)',
    )
    first_event_id: Optional[str] = Field(
        None,
        description='The FIRST internal Event ID, used to link to the event on the FRC webpage.',
    )
    gmaps_place_id: Optional[str] = Field(
        None, description='Google Maps Place ID for the event address.'
    )
    gmaps_url: Optional[str] = Field(
        None, description='Link to address location on Google Maps.'
    )
    key: str = Field(
        ...,
        description='TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.',
    )
    lat: Optional[float] = Field(None, description='Latitude for the event address.')
    lng: Optional[float] = Field(None, description='Longitude for the event address.')
    location_name: Optional[str] = Field(
        None,
        description='Name of the location at the address for the event, eg. Blue Alliance High School.',
    )
    name: str = Field(
        ...,
        description='Official name of event on record either provided by FIRST or organizers of offseason event.',
    )
    parent_event_key: Optional[str] = Field(
        None,
        description="The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.",
    )
    playoff_type: Optional[int] = Field(
        None,
        description='Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.',
    )
    playoff_type_string: Optional[str] = Field(
        None, description='String representation of the `playoff_type`, or null.'
    )
    postal_code: Optional[str] = Field(
        None, description='Postal code from the event address.'
    )
    short_name: Optional[str] = Field(
        None,
        description="Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.",
    )
    start_date: date_aliased = Field(
        ..., description='Event start date in `yyyy-mm-dd` format.'
    )
    state_prov: Optional[str] = Field(
        None, description='State or Province the event is located in.'
    )
    timezone: Optional[str] = Field(None, description='Timezone name.')
    webcasts: Optional[List[Webcast]] = None
    website: Optional[str] = Field(None, description="The event's website, if any.")
    week: Optional[int] = Field(
        None,
        description="Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)",
    )
    year: int = Field(..., description='Year the event data is for.')


class Ranking(BaseModel):
    dq: int = Field(..., description='Number of times disqualified.')
    extra_stats: Optional[List[float]] = Field(
        None,
        description="Additional special data on the team's performance calculated by TBA.",
    )
    matches_played: int = Field(
        ..., description='Number of matches played by this team.'
    )
    qual_average: Optional[int] = Field(
        None,
        description='The average match score during qualifications. Year specific. May be null if not relevant for a given year.',
    )
    rank: int = Field(
        ..., description="The team's rank at the event as provided by FIRST."
    )
    record: WLTRecord
    sort_orders: Optional[List[float]] = Field(
        None,
        description='Additional year-specific information, may be null. See parent `sort_order_info` for details.',
    )
    team_key: str = Field(..., description='The team with this rank.')


class EventRanking(BaseModel):
    extra_stats_info: Optional[List[ExtraStatsInfoItem]] = Field(
        None,
        description='List of special TBA-generated values provided in the `extra_stats` array for each item.',
    )
    rankings: List[Ranking] = Field(..., description='List of rankings at the event.')
    sort_order_info: List[SortOrderInfoItem] = Field(
        ...,
        description='List of year-specific values provided in the `sort_orders` array for each team.',
    )


class Alliances(BaseModel):
    blue: Optional[MatchAlliance] = None
    red: Optional[MatchAlliance] = None


class Match(BaseModel):
    actual_time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.',
    )
    alliances: Optional[Alliances] = Field(
        None,
        description='A list of alliances, the teams on the alliances, and their score.',
    )
    comp_level: CompLevel = Field(
        ..., description='The competition level the match was played at.'
    )
    event_key: str = Field(
        ..., description='Event key of the event the match was played at.'
    )
    key: str = Field(
        ...,
        description='TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.',
    )
    match_number: int = Field(
        ..., description='The match number of the match in the competition level.'
    )
    post_result_time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.',
    )
    predicted_time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.',
    )
    score_breakdown: Optional[Dict[str, Any]] = Field(
        None,
        description='Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.',
    )
    set_number: int = Field(
        ...,
        description='The set number in a series of matches where more than one match is required in the match series.',
    )
    time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.',
    )
    videos: Optional[List[Video]] = Field(
        None, description='Array of video objects associated with this match.'
    )
    winning_alliance: Optional[WinningAlliance] = Field(
        None,
        description='The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.',
    )


class MatchScoreBreakdown2015(BaseModel):
    blue: Optional[MatchScoreBreakdown2015Alliance] = None
    coopertition: Optional[Coopertition] = None
    coopertition_points: Optional[int] = None
    red: Optional[MatchScoreBreakdown2015Alliance] = None


class MatchScoreBreakdown2016(BaseModel):
    blue: Optional[MatchScoreBreakdown2016Alliance] = None
    red: Optional[MatchScoreBreakdown2016Alliance] = None


class MatchScoreBreakdown2017(BaseModel):
    blue: Optional[MatchScoreBreakdown2017Alliance] = None
    red: Optional[MatchScoreBreakdown2017Alliance] = None


class MatchScoreBreakdown2018(BaseModel):
    blue: Optional[MatchScoreBreakdown2018Alliance] = None
    red: Optional[MatchScoreBreakdown2018Alliance] = None


class MatchScoreBreakdown2019(BaseModel):
    blue: Optional[MatchScoreBreakdown2019Alliance] = None
    red: Optional[MatchScoreBreakdown2019Alliance] = None


class MatchScoreBreakdown2020(BaseModel):
    blue: Optional[MatchScoreBreakdown2020Alliance] = None
    red: Optional[MatchScoreBreakdown2020Alliance] = None


class MatchScoreBreakdown2022(BaseModel):
    blue: Optional[MatchScoreBreakdown2022Alliance] = None
    red: Optional[MatchScoreBreakdown2022Alliance] = None


class MatchSimple(BaseModel):
    actual_time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.',
    )
    alliances: Optional[Alliances] = Field(
        None,
        description='A list of alliances, the teams on the alliances, and their score.',
    )
    comp_level: CompLevel = Field(
        ..., description='The competition level the match was played at.'
    )
    event_key: str = Field(
        ..., description='Event key of the event the match was played at.'
    )
    key: str = Field(
        ...,
        description='TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set.',
    )
    match_number: int = Field(
        ..., description='The match number of the match in the competition level.'
    )
    predicted_time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.',
    )
    set_number: int = Field(
        ...,
        description='The set number in a series of matches where more than one match is required in the match series.',
    )
    time: Optional[int] = Field(
        None,
        description='UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.',
    )
    winning_alliance: Optional[WinningAlliance] = Field(
        None,
        description='The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.',
    )


class TeamEventStatusAlliance(BaseModel):
    backup: Optional[TeamEventStatusAllianceBackup] = None
    name: Optional[str] = Field(None, description='Alliance name, may be null.')
    number: int = Field(..., description='Alliance number.')
    pick: int = Field(
        ...,
        description='Order the team was picked in the alliance from 0-2, with 0 being alliance captain.',
    )


class TeamEventStatusPlayoff(BaseModel):
    current_level_record: Optional[WLTRecord] = None
    level: Optional[Level] = Field(
        None, description='The highest playoff level the team reached.'
    )
    playoff_average: Optional[int] = Field(
        None,
        description='The average match score during playoffs. Year specific. May be null if not relevant for a given year.',
    )
    record: Optional[WLTRecord] = None
    status: Optional[Status1] = Field(
        None, description='Current competition status for the playoffs.'
    )


class Ranking1(BaseModel):
    dq: Optional[int] = Field(
        None, description='Number of matches the team was disqualified for.'
    )
    matches_played: Optional[int] = Field(None, description='Number of matches played.')
    qual_average: Optional[float] = Field(
        None, description='For some years, average qualification score. Can be null.'
    )
    rank: Optional[int] = Field(None, description='Relative rank of this team.')
    record: Optional[WLTRecord] = None
    sort_orders: Optional[List[float]] = Field(
        None,
        description='Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value.',
    )
    team_key: Optional[str] = Field(None, description='TBA team key for this rank.')


class TeamEventStatusRank(BaseModel):
    num_teams: Optional[int] = Field(None, description='Number of teams ranked.')
    ranking: Optional[Ranking1] = None
    sort_order_info: Optional[List[SortOrderInfoItem1]] = Field(
        None,
        description='Ordered list of names corresponding to the elements of the `sort_orders` array.',
    )
    status: Optional[str] = None


class Alliances2(BaseModel):
    blue: Optional[List[ZebraTeam]] = Field(
        None, description='Zebra data for teams on the blue alliance'
    )
    red: Optional[List[ZebraTeam]] = Field(
        None, description='Zebra MotionWorks data for teams on the red alliance'
    )


class Zebra(BaseModel):
    alliances: Alliances2
    key: str = Field(
        ...,
        description='TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.',
    )
    times: List[float] = Field(
        ...,
        description='A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.',
    )


class DistrictDistrictKeyEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class EventEventKeyAlliancesGetResponse(RootModel[List[EliminationAlliance]]):
    root: List[EliminationAlliance]


class EventEventKeyAwardsGetResponse(RootModel[List[Award]]):
    root: List[Award]


class EventEventKeyMatchesGetResponse(RootModel[List[Match]]):
    root: List[Match]


class EventEventKeyMatchesSimpleGetResponse(RootModel[List[MatchSimple]]):
    root: List[MatchSimple]


class EventsYearGetResponse(RootModel[List[Event]]):
    root: List[Event]


class TeamTeamKeyAwardsGetResponse(RootModel[List[Award]]):
    root: List[Award]


class TeamTeamKeyAwardsYearGetResponse(RootModel[List[Award]]):
    root: List[Award]


class TeamTeamKeyEventEventKeyAwardsGetResponse(RootModel[List[Award]]):
    root: List[Award]


class TeamTeamKeyEventEventKeyMatchesGetResponse(RootModel[List[Match]]):
    root: List[Match]


class TeamTeamKeyEventEventKeyMatchesSimpleGetResponse(RootModel[List[Match]]):
    root: List[Match]


class TeamTeamKeyEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class TeamTeamKeyEventsYearGetResponse(RootModel[List[Event]]):
    root: List[Event]


class TeamTeamKeyMatchesYearGetResponse(RootModel[List[Match]]):
    root: List[Match]


class TeamTeamKeyMatchesYearSimpleGetResponse(RootModel[List[MatchSimple]]):
    root: List[MatchSimple]


class TeamEventStatus(BaseModel):
    alliance: Optional[TeamEventStatusAlliance] = None
    alliance_status_str: Optional[str] = Field(
        None,
        description="An HTML formatted string suitable for display to the user containing the team's alliance pick status.",
    )
    last_match_key: Optional[str] = Field(
        None,
        description='TBA match key for the last match the team played in at this event, or null.',
    )
    next_match_key: Optional[str] = Field(
        None,
        description='TBA match key for the next match the team is scheduled to play in at this event, or null.',
    )
    overall_status_str: Optional[str] = Field(
        None,
        description="An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.",
    )
    playoff: Optional[TeamEventStatusPlayoff] = None
    playoff_status_str: Optional[str] = Field(
        None,
        description="An HTML formatter string suitable for display to the user containing the team's playoff status.",
    )
    qual: Optional[TeamEventStatusRank] = None


class EventEventKeyTeamsStatusesGetResponse(
    RootModel[Optional[Dict[str, TeamEventStatus]]]
):
    root: Optional[Dict[str, TeamEventStatus]] = None


class TeamTeamKeyEventsYearStatusesGetResponse(
    RootModel[Optional[Dict[str, TeamEventStatus]]]
):
    root: Optional[Dict[str, TeamEventStatus]] = None
